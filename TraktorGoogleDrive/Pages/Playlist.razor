@page "/playlist/{Uuid}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject CollectionService CollectionService

@using TraktorGoogleDrive.Services
@using TraktorGoogleDrive.Components
@using TraktorNmlParser.Models
@using System.Text.Json
@using System.Diagnostics;

<h3>@Name</h3>

@if (tracks is null)
{
    <p>Loading tracks...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Artist</th>
                <th>Release</th>
                <th>Label</th>
                <th>Comment</th>
                <th>Playtime</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in tracks)
            {
                var filename = Path.GetFileName(track.Path);
                var file = files.FirstOrDefault(f => f.Name == filename);

                <tr>
                    <td>@track.Title</td>
                    <td>@track.Artist</td>
                    <td>@Path.GetFileName(Path.GetDirectoryName(track.Path))</td>
                    <td>@track.Label</td>
                    <td>@track.Comment</td>
                    <td>@(track.PlaytimeFloat?.ToString("0.0") ?? "") s</td>
                    <td>
                        @if (file is not null)
                        {
                            <AudioTrack Name="@file.Name" Id="@file.Id" MimeType="@file.MimeType" Token="@token" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public string? Uuid { get; set; }

    class FileEntry
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string MimeType { get; set; } = "";
    }

    string? Name;
    List<Track>? tracks;
    List<FileEntry> files = [];
    string? token;

    protected override async Task OnParametersSetAsync()
    {
        var watch = Stopwatch.StartNew();
        Console.WriteLine($"Loading playlist with UUID: {Uuid}");
        var playlist = await CollectionService.GetPlaylistByUuid(Uuid);
        if (playlist is null) return;
        Console.WriteLine($"Playlist loaded at {watch.Elapsed.TotalSeconds}s");

        Name = playlist.Name;
        tracks = playlist.Tracks;

        token = await JS.InvokeAsync<string>("sessionStorage.getItem", "access_token");

        // Extract unique filenames
        var filenames = tracks.Select(t => Path.GetFileName(t.Path)).Distinct();

        Console.WriteLine($"Start drive query {watch.Elapsed.TotalSeconds}s");
        var nameConditions = string.Join(" or ", filenames.Select(f => $"name = '{f.Replace("'", "\\'")}'"));
        var query = $"mimeType contains 'audio/' and ({nameConditions})";

        var json = await Http.GetFromJsonAsync<JsonElement>(
            $"https://www.googleapis.com/drive/v3/files?q={Uri.EscapeDataString(query)}&fields=files(id,name,mimeType)&access_token={token}"
        );
        Console.WriteLine($"Drive query done {watch.Elapsed.TotalSeconds}s");
        files = json.GetProperty("files").EnumerateArray().Select(f => new FileEntry
            {
                Id = f.GetProperty("id").GetString()!,
                Name = f.GetProperty("name").GetString()!,
                MimeType = f.GetProperty("mimeType").GetString()!
            }).ToList();
        Console.WriteLine($"Page loaded {watch.Elapsed.TotalSeconds}s");
    }
}
