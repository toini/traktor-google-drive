@page "/playlist/{Uuid}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject TraktorGoogleDrive.Services.CollectionService CollectionService

@using TraktorGoogleDrive.Components
@using TraktorNmlParser.Models
@using TraktorGoogleDrive.Models
@using System.Text.Json
@using System.Diagnostics;

<div class="playlist-header">
    <h3 class="playlist-title">
        <span class="playlist-icon">♫</span>
        @Name
        @if (files?.Count > 0)
        {
            <small class="track-count">(@files.Count tracks)</small>
        }
    </h3>
</div>

@if (files is null)
{
    <p>Loading tracks...</p>
}
else
{
    <div class="table-responsive">
        <table id="playlist-table" class="table table-striped table-hover">
            <thead>
                <tr>
                    <th style="width: 200px;">Title</th>
                    <th style="width: 150px;">Artist</th>
                    <th style="width: 120px;">Release</th>
                    <th style="width: 100px;">Label</th>
                    <th style="width: 100px;">Comment</th>
                    <th style="width: 80px;">Playtime</th>
                    <th style="width: 250px;">Path</th>
                    <th style="width: 60px;">Play</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in files)
                {
                    <tr class="@(currentlyPlayingId == file.DriveFileId ? "currently-playing" : "")">
                        <td class="text-truncate" style="max-width: 0;" title="@(file.Track?.Title ?? "")">@(file.Track?.Title ?? "")</td>
                        <td class="text-truncate" style="max-width: 0;" title="@(file.Track?.Artist ?? "")">@(file.Track?.Artist ?? "")</td>
                        <td class="text-truncate" style="max-width: 0;" title="@Path.GetFileName(Path.GetDirectoryName(file.Track?.Path ?? ""))">@Path.GetFileName(Path.GetDirectoryName(file.Track?.Path ?? ""))</td>
                        <td class="text-truncate" style="max-width: 0;" title="@(file.Track?.Label ?? "")">@(file.Track?.Label ?? "")</td>
                        <td class="text-truncate" style="max-width: 0;" title="@(file.Track?.Comment ?? "")">@(file.Track?.Comment ?? "")</td>
                        <td class="text-nowrap">@(file.Track?.PlaytimeFloat?.ToString("0.0") ?? "") s</td>
                        <td class="text-truncate" style="max-width: 0;" title="@(file.Track?.Path ?? "")">@(file.Track?.Path ?? "")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(file.DriveFileId))
                            {
                                <AudioTrack File="@file" Token="@token" OnPlayStateChanged="OnPlayStateChanged" />
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter] public string? Uuid { get; set; }

    string? Name;
    List<FileEntry> files = [];
    string? token;
    string? currentlyPlayingId;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Uuid)) return;
        
        var watch = Stopwatch.StartNew();
        Console.WriteLine($"Loading playlist with UUID: {Uuid}");
        var playlist = await CollectionService.GetPlaylistByUuid(Uuid);
        if (playlist is null) return;
        Console.WriteLine($"Playlist loaded at {watch.Elapsed.TotalSeconds}s");

        Name = playlist.Name;

        // Log all paths
        foreach (var t in playlist.Tracks)
        {
            Console.WriteLine($"Track path: {t.Path}");
        }

        token = await JS.InvokeAsync<string>("sessionStorage.getItem", "access_token");

        // Extract unique filenames
        var filenames = playlist.Tracks.Select(t => Path.GetFileName(t.Path)).Distinct();
        foreach (var t in filenames)
        {
            Console.WriteLine($"Filename: {t}");
        }

        Console.WriteLine($"Start drive query {watch.Elapsed.TotalSeconds}s");
        var nameConditions = string.Join(" or ", filenames.Select(f => $"name = '{f.Replace("'", "\\'")}'"));
        var query = $"mimeType contains 'audio/' and ({nameConditions})";

        var json = await Http.GetFromJsonAsync<JsonElement>(
        $"https://www.googleapis.com/drive/v3/files?q={Uri.EscapeDataString(query)}&fields=files(id,name,mimeType)&access_token={token}"
        );
        Console.WriteLine($"Drive raw file query done {watch.Elapsed.TotalSeconds}s");

        // Map files from playlist tracks, matching to Drive files by filename
        var driveFiles = json.GetProperty("files").EnumerateArray().Select(f => new FileEntry
        {
            DriveFileId = f.GetProperty("id").GetString()!,
            DriveFileName = f.GetProperty("name").GetString()!,
            DriveFileMimeType = f.GetProperty("mimeType").GetString()!,
        }).ToList();

        files = playlist.Tracks.Select(t =>
        {
            var file = driveFiles.FirstOrDefault(f => f.DriveFileName == Path.GetFileName(t.Path));
            Console.WriteLine($"Track path: {t.Path} | Matched file: {(file != null ? file.DriveFileName : "(none)")}");
            if (file is null)
            {
                Console.WriteLine($"No matching file found for track: {t.Path}");
                return new FileEntry { Track = t }; // Return empty FileEntry with track info
            }

            file.Track = t;
            return file;
        }).ToList();

        Console.WriteLine($"Page loaded {watch.Elapsed.TotalSeconds}s");
    }

    private void OnPlayStateChanged(string? playingFileId)
    {
        currentlyPlayingId = playingFileId;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && files?.Count > 0)
        {
            await JS.InvokeVoidAsync("initResizableTable", "playlist-table");
        }
    }
}
