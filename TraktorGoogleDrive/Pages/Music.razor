@page "/music"
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Text.Json

<h3>Drive Music</h3>

@if (files is null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var file in files)
    {
        <div style="margin-bottom: 1.5rem;" @key="file.Id">
            <p>@file.Name</p>
            <button @onclick="@(() => Play(file.Id))">▶️ Play</button>
            <button @onclick="@PauseAll">⏸ Pause</button>

            <div style="position: relative; height: 20px; background: #ccc; cursor: pointer; width: 100%;"
                 @onclick="@((e) => Seek(file.Id, e))">
                <div id="@($"progress-{file.Id}")"
                     style="position: absolute; height: 100%; background: #007bff; width: 0%;"></div>
            </div>
        </div>
    }
}

@code {
    class FileEntry
    {
        public string Name { get; set; }
        public string Id { get; set; }
        public string MimeType { get; set; }
        //public ElementReference AudioRef { get; set; }
    }

    List<FileEntry> files = new();
    string? token;
    //HashSet<string> streamed = new();

    // async Task StreamAudio(FileEntry file)
    // {
    //     if (streamed.Contains(file.Id)) return;
    //     streamed.Add(file.Id);

    //     Console.WriteLine($"Streaming: {file.Id}");
    //     await JS.InvokeVoidAsync("secureStreamToAudio", file.Id, token, file.MimeType);
    // }

    string? currentlyPlayingId;

    async Task Play(string id)
    {
        if (currentlyPlayingId == id) return;

        currentlyPlayingId = id;
        await JS.InvokeVoidAsync("secureStreamToAudio", id, token, files.First(f => f.Id == id).MimeType);
    }

    async Task PauseAll()
    {
        currentlyPlayingId = null;
        await JS.InvokeVoidAsync("seekToSecond", 999999); // a workaround to stop playback
    }

    // Called when user clicks progress bar
    async Task Seek(string id, MouseEventArgs e)
    {
        var width = 300.0; // Match to real pixel width if set via CSS
        var percent = e.OffsetX / width;
        var duration = await JS.InvokeAsync<double>("getCurrentDuration");
        var seconds = percent * duration;
        await JS.InvokeVoidAsync("seekToSecond", seconds);
    }

    protected override async Task OnInitializedAsync()
    {
        token = await JS.InvokeAsync<string>("sessionStorage.getItem", "access_token");

        var result = await Http.GetFromJsonAsync<JsonElement>(
            $"https://www.googleapis.com/drive/v3/files?q=mimeType contains 'audio/'&fields=files(id,name,mimeType)&access_token={token}"
        );

        files = result.GetProperty("files").EnumerateArray()
            .Select(f => new FileEntry
                {
                    Id = f.GetProperty("id").GetString(),
                    Name = f.GetProperty("name").GetString(),
                    MimeType = f.GetProperty("mimeType").GetString()                    
                })
            .ToList();
    }
}
