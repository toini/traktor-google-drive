@namespace TraktorGoogleDrive.Components
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using TraktorGoogleDrive.Models

<button class="btn btn-sm btn-outline-primary play-button @(isPlaying ? "playing" : "")" @onclick="PlayPause" style="padding: 2px 8px; font-size: 12px;">
    @if (isPlaying)
    {
        <span>⏸️</span>
    }
    else
    {
        <span>▶️</span>
    }
</button>

@code {
    [Parameter] public FileEntry? File { get; set; }
    [Parameter] public string? Token { get; set; }
    [Parameter] public EventCallback<string?> OnPlayStateChanged { get; set; }

    private bool isPlaying = false;
    private IJSObjectReference? audioElement;

    protected override void OnParametersSet()
    {
        if (File != null)
        {
            // Check if this is the currently playing track
            var currentlyPlayingId = GetCurrentlyPlayingId();
            var wasPlaying = isPlaying;
            isPlaying = currentlyPlayingId == File.DriveFileId;
            
            if (wasPlaying != isPlaying)
            {
                StateHasChanged();
            }
        }
    }

    private string? GetCurrentlyPlayingId()
    {
        // This would ideally come from a shared service, but for now we'll use a simple approach
        return null; // Will be managed by the parent component
    }

    async Task PlayPause()
    {
        if (File == null || string.IsNullOrEmpty(Token)) return;

        try
        {
            if (audioElement == null)
            {
                var audioUrl = $"/api/proxy/drive/{File.DriveFileId}?token={Token}";
                audioElement = await JS.InvokeAsync<IJSObjectReference>("createAudioElement", audioUrl);
                
                // Add event listeners for audio end and pause
                await JS.InvokeVoidAsync("addAudioEventListeners", audioElement, DotNetObjectReference.Create(this));
            }

            if (isPlaying)
            {
                await JS.InvokeVoidAsync("pauseAudio", audioElement);
                isPlaying = false;
                await OnPlayStateChanged.InvokeAsync(null);
            }
            else
            {
                await JS.InvokeVoidAsync("playAudio", audioElement);
                isPlaying = true;
                await OnPlayStateChanged.InvokeAsync(File.DriveFileId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error playing audio: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnAudioEnded()
    {
        isPlaying = false;
        await OnPlayStateChanged.InvokeAsync(null);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnAudioPaused()
    {
        isPlaying = false;
        await OnPlayStateChanged.InvokeAsync(null);
        StateHasChanged();
    }

    public async Task StopPlayback()
    {
        if (audioElement != null && isPlaying)
        {
            await JS.InvokeVoidAsync("pauseAudio", audioElement);
            isPlaying = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (audioElement != null)
        {
            await audioElement.DisposeAsync();
        }
    }
}

<style>
    .play-button {
        min-width: 32px;
        height: 28px;
        border-radius: 4px;
    }
</style>
